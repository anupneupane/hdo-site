require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# xIt demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# xIt assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# xIt only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Admin::PartyCommentsController do

  before(:each) { sign_in User.make!(role: 'admin') }
  let(:party_comment) { PartyComment.make! }

  describe "GET index" do
    it "assigns all admin_party_comments as @admin_party_comments" do
      party_comment = PartyComment.make!
      get :index, { id: party_comment.id, issue_id: party_comment.issue.id }
      response.should be_ok
      assigns(:admin_party_comments).should eq([party_comment])
    end
  end

  describe "POST create" do
    describe "with valid params" do
      let(:issue) { Issue.make! }
      let(:party) { Party.make! }

      it "creates a new PartyComment" do
        valid_attributes = {
          issue_id: issue.id,
          party_id: party.id,
          title:    'haha',
          body:     'not..'
        }
        expect {
          post :create, { issue_id: issue.id, admin_party_comment: valid_attributes }
        }.to change(PartyComment, :count).by(1)
      end

      xit "assigns a newly created admin_party_comment as @admin_party_comment" do
        post :create, {:admin_party_comment => valid_attributes}, valid_session
        assigns(:admin_party_comment).should be_a(Admin::PartyComment)
        assigns(:admin_party_comment).should be_persisted
      end

      xit "redirects to the created admin_party_comment" do
        post :create, {:admin_party_comment => valid_attributes}, valid_session
        response.should redirect_to(Admin::PartyComment.last)
      end
    end

    describe "with invalid params" do
      xit "assigns a newly created but unsaved admin_party_comment as @admin_party_comment" do
        # Trigger the behavior that occurs when invalid params are submitted
        PartyComment.any_instance.stub(:save).and_return(false)
        post :create, {:admin_party_comment => {  }}, valid_session
        assigns(:admin_party_comment).should be_a_new(Admin::PartyComment)
      end

      xit "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        PartyComment.any_instance.stub(:save).and_return(false)
        post :create, {:admin_party_comment => {  }}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      xit "updates the requested admin_party_comment" do
        party_comment = PartyComment.create! valid_attributes
        # Assuming there are no other admin_party_comments in the database, this
        # specifies that the Admin::PartyComment created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        PartyComment.any_instance.should_receive(:update_attributes).with({ "these" => "params" })
        put :update, {:id => party_comment.to_param, :admin_party_comment => { "these" => "params" }}, valid_session
      end

      xit "assigns the requested admin_party_comment as @admin_party_comment" do
        party_comment = PartyComment.create! valid_attributes
        put :update, {:id => party_comment.to_param, :admin_party_comment => valid_attributes}, valid_session
        assigns(:admin_party_comment).should eq(party_comment)
      end

      xit "redirects to the admin_party_comment" do
        party_comment = PartyComment.create! valid_attributes
        put :update, {:id => party_comment.to_param, :admin_party_comment => valid_attributes}, valid_session
        response.should redirect_to(party_comment)
      end
    end

    describe "with invalid params" do
      xit "assigns the admin_party_comment as @admin_party_comment" do
        party_comment = PartyComment.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        PartyComment.any_instance.stub(:save).and_return(false)
        put :update, {:id => party_comment.to_param, :admin_party_comment => {  }}, valid_session
        assigns(:admin_party_comment).should eq(party_comment)
      end

      xit "re-renders the 'edit' template" do
        party_comment = PartyComment.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        PartyComment.any_instance.stub(:save).and_return(false)
        put :update, {:id => party_comment.to_param, :admin_party_comment => {  }}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    xit "destroys the requested admin_party_comment" do
      party_comment = PartyComment.create! valid_attributes
      expect {
        delete :destroy, {:id => party_comment.to_param}, valid_session
      }.to change(Admin::PartyComment, :count).by(-1)
    end

    xit "redirects to the admin_party_comments list" do
      party_comment = PartyComment.create! valid_attributes
      delete :destroy, {:id => party_comment.to_param}, valid_session
      response.should redirect_to(admin_party_comments_url)
    end
  end

end
